// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  client: (where?: ClientWhereInput) => Promise<boolean>;
  ingressOfWork: (where?: IngressOfWorkWhereInput) => Promise<boolean>;
  spendOfWork: (where?: SpendOfWorkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workType: (where?: WorkTypeWhereInput) => Promise<boolean>;
  workTypeCategory: (where?: WorkTypeCategoryWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  ingressOfWork: (
    where: IngressOfWorkWhereUniqueInput
  ) => IngressOfWorkNullablePromise;
  ingressOfWorks: (args?: {
    where?: IngressOfWorkWhereInput;
    orderBy?: IngressOfWorkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<IngressOfWork>;
  ingressOfWorksConnection: (args?: {
    where?: IngressOfWorkWhereInput;
    orderBy?: IngressOfWorkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IngressOfWorkConnectionPromise;
  spendOfWork: (
    where: SpendOfWorkWhereUniqueInput
  ) => SpendOfWorkNullablePromise;
  spendOfWorks: (args?: {
    where?: SpendOfWorkWhereInput;
    orderBy?: SpendOfWorkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SpendOfWork>;
  spendOfWorksConnection: (args?: {
    where?: SpendOfWorkWhereInput;
    orderBy?: SpendOfWorkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpendOfWorkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  workType: (where: WorkTypeWhereUniqueInput) => WorkTypeNullablePromise;
  workTypes: (args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkType>;
  workTypesConnection: (args?: {
    where?: WorkTypeWhereInput;
    orderBy?: WorkTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkTypeConnectionPromise;
  workTypeCategory: (
    where: WorkTypeCategoryWhereUniqueInput
  ) => WorkTypeCategoryNullablePromise;
  workTypeCategories: (args?: {
    where?: WorkTypeCategoryWhereInput;
    orderBy?: WorkTypeCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkTypeCategory>;
  workTypeCategoriesConnection: (args?: {
    where?: WorkTypeCategoryWhereInput;
    orderBy?: WorkTypeCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkTypeCategoryConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createIngressOfWork: (data: IngressOfWorkCreateInput) => IngressOfWorkPromise;
  updateIngressOfWork: (args: {
    data: IngressOfWorkUpdateInput;
    where: IngressOfWorkWhereUniqueInput;
  }) => IngressOfWorkPromise;
  updateManyIngressOfWorks: (args: {
    data: IngressOfWorkUpdateManyMutationInput;
    where?: IngressOfWorkWhereInput;
  }) => BatchPayloadPromise;
  upsertIngressOfWork: (args: {
    where: IngressOfWorkWhereUniqueInput;
    create: IngressOfWorkCreateInput;
    update: IngressOfWorkUpdateInput;
  }) => IngressOfWorkPromise;
  deleteIngressOfWork: (
    where: IngressOfWorkWhereUniqueInput
  ) => IngressOfWorkPromise;
  deleteManyIngressOfWorks: (
    where?: IngressOfWorkWhereInput
  ) => BatchPayloadPromise;
  createSpendOfWork: (data: SpendOfWorkCreateInput) => SpendOfWorkPromise;
  updateSpendOfWork: (args: {
    data: SpendOfWorkUpdateInput;
    where: SpendOfWorkWhereUniqueInput;
  }) => SpendOfWorkPromise;
  updateManySpendOfWorks: (args: {
    data: SpendOfWorkUpdateManyMutationInput;
    where?: SpendOfWorkWhereInput;
  }) => BatchPayloadPromise;
  upsertSpendOfWork: (args: {
    where: SpendOfWorkWhereUniqueInput;
    create: SpendOfWorkCreateInput;
    update: SpendOfWorkUpdateInput;
  }) => SpendOfWorkPromise;
  deleteSpendOfWork: (where: SpendOfWorkWhereUniqueInput) => SpendOfWorkPromise;
  deleteManySpendOfWorks: (
    where?: SpendOfWorkWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkType: (data: WorkTypeCreateInput) => WorkTypePromise;
  updateWorkType: (args: {
    data: WorkTypeUpdateInput;
    where: WorkTypeWhereUniqueInput;
  }) => WorkTypePromise;
  updateManyWorkTypes: (args: {
    data: WorkTypeUpdateManyMutationInput;
    where?: WorkTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkType: (args: {
    where: WorkTypeWhereUniqueInput;
    create: WorkTypeCreateInput;
    update: WorkTypeUpdateInput;
  }) => WorkTypePromise;
  deleteWorkType: (where: WorkTypeWhereUniqueInput) => WorkTypePromise;
  deleteManyWorkTypes: (where?: WorkTypeWhereInput) => BatchPayloadPromise;
  createWorkTypeCategory: (
    data: WorkTypeCategoryCreateInput
  ) => WorkTypeCategoryPromise;
  updateWorkTypeCategory: (args: {
    data: WorkTypeCategoryUpdateInput;
    where: WorkTypeCategoryWhereUniqueInput;
  }) => WorkTypeCategoryPromise;
  updateManyWorkTypeCategories: (args: {
    data: WorkTypeCategoryUpdateManyMutationInput;
    where?: WorkTypeCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkTypeCategory: (args: {
    where: WorkTypeCategoryWhereUniqueInput;
    create: WorkTypeCategoryCreateInput;
    update: WorkTypeCategoryUpdateInput;
  }) => WorkTypeCategoryPromise;
  deleteWorkTypeCategory: (
    where: WorkTypeCategoryWhereUniqueInput
  ) => WorkTypeCategoryPromise;
  deleteManyWorkTypeCategories: (
    where?: WorkTypeCategoryWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  ingressOfWork: (
    where?: IngressOfWorkSubscriptionWhereInput
  ) => IngressOfWorkSubscriptionPayloadSubscription;
  spendOfWork: (
    where?: SpendOfWorkSubscriptionWhereInput
  ) => SpendOfWorkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workType: (
    where?: WorkTypeSubscriptionWhereInput
  ) => WorkTypeSubscriptionPayloadSubscription;
  workTypeCategory: (
    where?: WorkTypeCategorySubscriptionWhereInput
  ) => WorkTypeCategorySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ClientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "imgUrl_ASC"
  | "imgUrl_DESC";

export type IngressOfWorkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ingressAmount_ASC"
  | "ingressAmount_DESC"
  | "tip_ASC"
  | "tip_DESC"
  | "date_ASC"
  | "date_DESC";

export type SpendOfWorkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "spendtype_ASC"
  | "spendtype_DESC"
  | "spendamount_ASC"
  | "spendamount_DESC"
  | "date_ASC"
  | "date_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC";

export type WorkTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC";

export type WorkTypeCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  imgUrl?: Maybe<String>;
  imgUrl_not?: Maybe<String>;
  imgUrl_in?: Maybe<String[] | String>;
  imgUrl_not_in?: Maybe<String[] | String>;
  imgUrl_lt?: Maybe<String>;
  imgUrl_lte?: Maybe<String>;
  imgUrl_gt?: Maybe<String>;
  imgUrl_gte?: Maybe<String>;
  imgUrl_contains?: Maybe<String>;
  imgUrl_not_contains?: Maybe<String>;
  imgUrl_starts_with?: Maybe<String>;
  imgUrl_not_starts_with?: Maybe<String>;
  imgUrl_ends_with?: Maybe<String>;
  imgUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export type IngressOfWorkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface IngressOfWorkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  workType?: Maybe<WorkTypeWhereInput>;
  client?: Maybe<ClientWhereInput>;
  ingressAmount?: Maybe<Float>;
  ingressAmount_not?: Maybe<Float>;
  ingressAmount_in?: Maybe<Float[] | Float>;
  ingressAmount_not_in?: Maybe<Float[] | Float>;
  ingressAmount_lt?: Maybe<Float>;
  ingressAmount_lte?: Maybe<Float>;
  ingressAmount_gt?: Maybe<Float>;
  ingressAmount_gte?: Maybe<Float>;
  tip?: Maybe<Float>;
  tip_not?: Maybe<Float>;
  tip_in?: Maybe<Float[] | Float>;
  tip_not_in?: Maybe<Float[] | Float>;
  tip_lt?: Maybe<Float>;
  tip_lte?: Maybe<Float>;
  tip_gt?: Maybe<Float>;
  tip_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IngressOfWorkWhereInput[] | IngressOfWorkWhereInput>;
}

export interface WorkTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  category?: Maybe<WorkTypeCategoryWhereInput>;
  AND?: Maybe<WorkTypeWhereInput[] | WorkTypeWhereInput>;
}

export interface WorkTypeCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  AND?: Maybe<WorkTypeCategoryWhereInput[] | WorkTypeCategoryWhereInput>;
}

export type SpendOfWorkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SpendOfWorkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  spendtype?: Maybe<String>;
  spendtype_not?: Maybe<String>;
  spendtype_in?: Maybe<String[] | String>;
  spendtype_not_in?: Maybe<String[] | String>;
  spendtype_lt?: Maybe<String>;
  spendtype_lte?: Maybe<String>;
  spendtype_gt?: Maybe<String>;
  spendtype_gte?: Maybe<String>;
  spendtype_contains?: Maybe<String>;
  spendtype_not_contains?: Maybe<String>;
  spendtype_starts_with?: Maybe<String>;
  spendtype_not_starts_with?: Maybe<String>;
  spendtype_ends_with?: Maybe<String>;
  spendtype_not_ends_with?: Maybe<String>;
  spendamount?: Maybe<Float>;
  spendamount_not?: Maybe<Float>;
  spendamount_in?: Maybe<Float[] | Float>;
  spendamount_not_in?: Maybe<Float[] | Float>;
  spendamount_lt?: Maybe<Float>;
  spendamount_lte?: Maybe<Float>;
  spendamount_gt?: Maybe<Float>;
  spendamount_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SpendOfWorkWhereInput[] | SpendOfWorkWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type WorkTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WorkTypeCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClientCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  imgUrl?: Maybe<String>;
}

export interface ClientUpdateInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  imgUrl?: Maybe<String>;
}

export interface ClientUpdateManyMutationInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  imgUrl?: Maybe<String>;
}

export interface IngressOfWorkCreateInput {
  id?: Maybe<ID_Input>;
  workType: WorkTypeCreateOneInput;
  client?: Maybe<ClientCreateOneInput>;
  ingressAmount: Float;
  tip: Float;
  date?: Maybe<DateTimeInput>;
}

export interface WorkTypeCreateOneInput {
  create?: Maybe<WorkTypeCreateInput>;
  connect?: Maybe<WorkTypeWhereUniqueInput>;
}

export interface WorkTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  price: Float;
  category: WorkTypeCategoryCreateOneInput;
}

export interface WorkTypeCategoryCreateOneInput {
  create?: Maybe<WorkTypeCategoryCreateInput>;
  connect?: Maybe<WorkTypeCategoryWhereUniqueInput>;
}

export interface WorkTypeCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: String;
}

export interface ClientCreateOneInput {
  create?: Maybe<ClientCreateInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface IngressOfWorkUpdateInput {
  workType?: Maybe<WorkTypeUpdateOneRequiredInput>;
  client?: Maybe<ClientUpdateOneInput>;
  ingressAmount?: Maybe<Float>;
  tip?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
}

export interface WorkTypeUpdateOneRequiredInput {
  create?: Maybe<WorkTypeCreateInput>;
  update?: Maybe<WorkTypeUpdateDataInput>;
  upsert?: Maybe<WorkTypeUpsertNestedInput>;
  connect?: Maybe<WorkTypeWhereUniqueInput>;
}

export interface WorkTypeUpdateDataInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
  category?: Maybe<WorkTypeCategoryUpdateOneRequiredInput>;
}

export interface WorkTypeCategoryUpdateOneRequiredInput {
  create?: Maybe<WorkTypeCategoryCreateInput>;
  update?: Maybe<WorkTypeCategoryUpdateDataInput>;
  upsert?: Maybe<WorkTypeCategoryUpsertNestedInput>;
  connect?: Maybe<WorkTypeCategoryWhereUniqueInput>;
}

export interface WorkTypeCategoryUpdateDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
}

export interface WorkTypeCategoryUpsertNestedInput {
  update: WorkTypeCategoryUpdateDataInput;
  create: WorkTypeCategoryCreateInput;
}

export interface WorkTypeUpsertNestedInput {
  update: WorkTypeUpdateDataInput;
  create: WorkTypeCreateInput;
}

export interface ClientUpdateOneInput {
  create?: Maybe<ClientCreateInput>;
  update?: Maybe<ClientUpdateDataInput>;
  upsert?: Maybe<ClientUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientUpdateDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  imgUrl?: Maybe<String>;
}

export interface ClientUpsertNestedInput {
  update: ClientUpdateDataInput;
  create: ClientCreateInput;
}

export interface IngressOfWorkUpdateManyMutationInput {
  ingressAmount?: Maybe<Float>;
  tip?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
}

export interface SpendOfWorkCreateInput {
  id?: Maybe<ID_Input>;
  spendtype: String;
  spendamount: Float;
  date?: Maybe<DateTimeInput>;
}

export interface SpendOfWorkUpdateInput {
  spendtype?: Maybe<String>;
  spendamount?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
}

export interface SpendOfWorkUpdateManyMutationInput {
  spendtype?: Maybe<String>;
  spendamount?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface WorkTypeUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
  category?: Maybe<WorkTypeCategoryUpdateOneRequiredInput>;
}

export interface WorkTypeUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface WorkTypeCategoryUpdateInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
}

export interface WorkTypeCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface IngressOfWorkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IngressOfWorkWhereInput>;
  AND?: Maybe<
    IngressOfWorkSubscriptionWhereInput[] | IngressOfWorkSubscriptionWhereInput
  >;
}

export interface SpendOfWorkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpendOfWorkWhereInput>;
  AND?: Maybe<
    SpendOfWorkSubscriptionWhereInput[] | SpendOfWorkSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WorkTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkTypeWhereInput>;
  AND?: Maybe<
    WorkTypeSubscriptionWhereInput[] | WorkTypeSubscriptionWhereInput
  >;
}

export interface WorkTypeCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkTypeCategoryWhereInput>;
  AND?: Maybe<
    | WorkTypeCategorySubscriptionWhereInput[]
    | WorkTypeCategorySubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Client {
  id: ID_Output;
  name: String;
  phone?: String;
  address?: String;
  imgUrl?: String;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  imgUrl: () => Promise<String>;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  imgUrl: () => Promise<String>;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IngressOfWork {
  id: ID_Output;
  ingressAmount: Float;
  tip: Float;
  date?: DateTimeOutput;
}

export interface IngressOfWorkPromise
  extends Promise<IngressOfWork>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workType: <T = WorkTypePromise>() => T;
  client: <T = ClientPromise>() => T;
  ingressAmount: () => Promise<Float>;
  tip: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface IngressOfWorkSubscription
  extends Promise<AsyncIterator<IngressOfWork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  workType: <T = WorkTypeSubscription>() => T;
  client: <T = ClientSubscription>() => T;
  ingressAmount: () => Promise<AsyncIterator<Float>>;
  tip: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IngressOfWorkNullablePromise
  extends Promise<IngressOfWork | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workType: <T = WorkTypePromise>() => T;
  client: <T = ClientPromise>() => T;
  ingressAmount: () => Promise<Float>;
  tip: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface WorkType {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface WorkTypePromise extends Promise<WorkType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  category: <T = WorkTypeCategoryPromise>() => T;
}

export interface WorkTypeSubscription
  extends Promise<AsyncIterator<WorkType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  category: <T = WorkTypeCategorySubscription>() => T;
}

export interface WorkTypeNullablePromise
  extends Promise<WorkType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  category: <T = WorkTypeCategoryPromise>() => T;
}

export interface WorkTypeCategory {
  id: ID_Output;
  name: String;
  color: String;
}

export interface WorkTypeCategoryPromise
  extends Promise<WorkTypeCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
}

export interface WorkTypeCategorySubscription
  extends Promise<AsyncIterator<WorkTypeCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface WorkTypeCategoryNullablePromise
  extends Promise<WorkTypeCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
}

export interface IngressOfWorkConnection {
  pageInfo: PageInfo;
  edges: IngressOfWorkEdge[];
}

export interface IngressOfWorkConnectionPromise
  extends Promise<IngressOfWorkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngressOfWorkEdge>>() => T;
  aggregate: <T = AggregateIngressOfWorkPromise>() => T;
}

export interface IngressOfWorkConnectionSubscription
  extends Promise<AsyncIterator<IngressOfWorkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngressOfWorkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngressOfWorkSubscription>() => T;
}

export interface IngressOfWorkEdge {
  node: IngressOfWork;
  cursor: String;
}

export interface IngressOfWorkEdgePromise
  extends Promise<IngressOfWorkEdge>,
    Fragmentable {
  node: <T = IngressOfWorkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngressOfWorkEdgeSubscription
  extends Promise<AsyncIterator<IngressOfWorkEdge>>,
    Fragmentable {
  node: <T = IngressOfWorkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngressOfWork {
  count: Int;
}

export interface AggregateIngressOfWorkPromise
  extends Promise<AggregateIngressOfWork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngressOfWorkSubscription
  extends Promise<AsyncIterator<AggregateIngressOfWork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpendOfWork {
  id: ID_Output;
  spendtype: String;
  spendamount: Float;
  date?: DateTimeOutput;
}

export interface SpendOfWorkPromise extends Promise<SpendOfWork>, Fragmentable {
  id: () => Promise<ID_Output>;
  spendtype: () => Promise<String>;
  spendamount: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface SpendOfWorkSubscription
  extends Promise<AsyncIterator<SpendOfWork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spendtype: () => Promise<AsyncIterator<String>>;
  spendamount: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpendOfWorkNullablePromise
  extends Promise<SpendOfWork | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spendtype: () => Promise<String>;
  spendamount: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface SpendOfWorkConnection {
  pageInfo: PageInfo;
  edges: SpendOfWorkEdge[];
}

export interface SpendOfWorkConnectionPromise
  extends Promise<SpendOfWorkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpendOfWorkEdge>>() => T;
  aggregate: <T = AggregateSpendOfWorkPromise>() => T;
}

export interface SpendOfWorkConnectionSubscription
  extends Promise<AsyncIterator<SpendOfWorkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpendOfWorkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpendOfWorkSubscription>() => T;
}

export interface SpendOfWorkEdge {
  node: SpendOfWork;
  cursor: String;
}

export interface SpendOfWorkEdgePromise
  extends Promise<SpendOfWorkEdge>,
    Fragmentable {
  node: <T = SpendOfWorkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpendOfWorkEdgeSubscription
  extends Promise<AsyncIterator<SpendOfWorkEdge>>,
    Fragmentable {
  node: <T = SpendOfWorkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpendOfWork {
  count: Int;
}

export interface AggregateSpendOfWorkPromise
  extends Promise<AggregateSpendOfWork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpendOfWorkSubscription
  extends Promise<AsyncIterator<AggregateSpendOfWork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkTypeConnection {
  pageInfo: PageInfo;
  edges: WorkTypeEdge[];
}

export interface WorkTypeConnectionPromise
  extends Promise<WorkTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkTypeEdge>>() => T;
  aggregate: <T = AggregateWorkTypePromise>() => T;
}

export interface WorkTypeConnectionSubscription
  extends Promise<AsyncIterator<WorkTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkTypeSubscription>() => T;
}

export interface WorkTypeEdge {
  node: WorkType;
  cursor: String;
}

export interface WorkTypeEdgePromise
  extends Promise<WorkTypeEdge>,
    Fragmentable {
  node: <T = WorkTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkTypeEdgeSubscription
  extends Promise<AsyncIterator<WorkTypeEdge>>,
    Fragmentable {
  node: <T = WorkTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkType {
  count: Int;
}

export interface AggregateWorkTypePromise
  extends Promise<AggregateWorkType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkTypeSubscription
  extends Promise<AsyncIterator<AggregateWorkType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkTypeCategoryConnection {
  pageInfo: PageInfo;
  edges: WorkTypeCategoryEdge[];
}

export interface WorkTypeCategoryConnectionPromise
  extends Promise<WorkTypeCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkTypeCategoryEdge>>() => T;
  aggregate: <T = AggregateWorkTypeCategoryPromise>() => T;
}

export interface WorkTypeCategoryConnectionSubscription
  extends Promise<AsyncIterator<WorkTypeCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkTypeCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkTypeCategorySubscription>() => T;
}

export interface WorkTypeCategoryEdge {
  node: WorkTypeCategory;
  cursor: String;
}

export interface WorkTypeCategoryEdgePromise
  extends Promise<WorkTypeCategoryEdge>,
    Fragmentable {
  node: <T = WorkTypeCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkTypeCategoryEdgeSubscription
  extends Promise<AsyncIterator<WorkTypeCategoryEdge>>,
    Fragmentable {
  node: <T = WorkTypeCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkTypeCategory {
  count: Int;
}

export interface AggregateWorkTypeCategoryPromise
  extends Promise<AggregateWorkTypeCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkTypeCategorySubscription
  extends Promise<AsyncIterator<AggregateWorkTypeCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface ClientPreviousValues {
  id: ID_Output;
  name: String;
  phone?: String;
  address?: String;
  imgUrl?: String;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  imgUrl: () => Promise<String>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface IngressOfWorkSubscriptionPayload {
  mutation: MutationType;
  node: IngressOfWork;
  updatedFields: String[];
  previousValues: IngressOfWorkPreviousValues;
}

export interface IngressOfWorkSubscriptionPayloadPromise
  extends Promise<IngressOfWorkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngressOfWorkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngressOfWorkPreviousValuesPromise>() => T;
}

export interface IngressOfWorkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngressOfWorkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngressOfWorkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngressOfWorkPreviousValuesSubscription>() => T;
}

export interface IngressOfWorkPreviousValues {
  id: ID_Output;
  ingressAmount: Float;
  tip: Float;
  date?: DateTimeOutput;
}

export interface IngressOfWorkPreviousValuesPromise
  extends Promise<IngressOfWorkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ingressAmount: () => Promise<Float>;
  tip: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface IngressOfWorkPreviousValuesSubscription
  extends Promise<AsyncIterator<IngressOfWorkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ingressAmount: () => Promise<AsyncIterator<Float>>;
  tip: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpendOfWorkSubscriptionPayload {
  mutation: MutationType;
  node: SpendOfWork;
  updatedFields: String[];
  previousValues: SpendOfWorkPreviousValues;
}

export interface SpendOfWorkSubscriptionPayloadPromise
  extends Promise<SpendOfWorkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpendOfWorkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpendOfWorkPreviousValuesPromise>() => T;
}

export interface SpendOfWorkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpendOfWorkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpendOfWorkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpendOfWorkPreviousValuesSubscription>() => T;
}

export interface SpendOfWorkPreviousValues {
  id: ID_Output;
  spendtype: String;
  spendamount: Float;
  date?: DateTimeOutput;
}

export interface SpendOfWorkPreviousValuesPromise
  extends Promise<SpendOfWorkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  spendtype: () => Promise<String>;
  spendamount: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface SpendOfWorkPreviousValuesSubscription
  extends Promise<AsyncIterator<SpendOfWorkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spendtype: () => Promise<AsyncIterator<String>>;
  spendamount: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface WorkTypeSubscriptionPayload {
  mutation: MutationType;
  node: WorkType;
  updatedFields: String[];
  previousValues: WorkTypePreviousValues;
}

export interface WorkTypeSubscriptionPayloadPromise
  extends Promise<WorkTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkTypePreviousValuesPromise>() => T;
}

export interface WorkTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkTypePreviousValuesSubscription>() => T;
}

export interface WorkTypePreviousValues {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface WorkTypePreviousValuesPromise
  extends Promise<WorkTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface WorkTypePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface WorkTypeCategorySubscriptionPayload {
  mutation: MutationType;
  node: WorkTypeCategory;
  updatedFields: String[];
  previousValues: WorkTypeCategoryPreviousValues;
}

export interface WorkTypeCategorySubscriptionPayloadPromise
  extends Promise<WorkTypeCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkTypeCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkTypeCategoryPreviousValuesPromise>() => T;
}

export interface WorkTypeCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkTypeCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkTypeCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkTypeCategoryPreviousValuesSubscription>() => T;
}

export interface WorkTypeCategoryPreviousValues {
  id: ID_Output;
  name: String;
  color: String;
}

export interface WorkTypeCategoryPreviousValuesPromise
  extends Promise<WorkTypeCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
}

export interface WorkTypeCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkTypeCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Client",
    embedded: false
  },
  {
    name: "WorkTypeCategory",
    embedded: false
  },
  {
    name: "WorkType",
    embedded: false
  },
  {
    name: "IngressOfWork",
    embedded: false
  },
  {
    name: "SpendOfWork",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
