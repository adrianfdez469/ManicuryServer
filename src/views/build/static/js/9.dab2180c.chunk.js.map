{"version":3,"sources":["../node_modules/@material-ui/icons/Edit.js","../node_modules/@material-ui/icons/Delete.js","../node_modules/@material-ui/icons/MoreVert.js","../node_modules/@material-ui/core/esm/CardHeader/CardHeader.js","App/Core/Pages/Clients/clientQuerys.js","App/Core/Pages/Ingress/ingress/ingressRow.view.js","App/Core/Pages/Ingress/useIngress.js","App/Core/Pages/Ingress/addingress.view.js","App/Core/Pages/Ingress/ingressQuerys.js","App/Core/Pages/Ingress/ingress.view.js","App/Core/Pages/Ingress/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","CardHeader","React","forwardRef","props","ref","action","avatar","classes","className","_props$component","component","Component","_props$disableTypogra","disableTypography","subheaderProp","subheader","subheaderTypographyProps","titleProp","title","titleTypographyProps","other","_objectWithoutProperties","type","Typography","_extends","variant","display","color","clsx","root","content","withStyles","alignItems","padding","flex","marginRight","alignSelf","marginTop","name","editClientMutation","gql","removeClientMutation","getClients","useRowStyles","makeStyles","theme","card","maxWidth","height","cursor","boxShadow","cardHeader","overflow","Row","ingress","remove","edit","useState","anchorEl","setAnchorEl","isMenuOpen","handleMenuClose","Actions","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","ListItemIcon","fontSize","ListItemText","primary","Tooltip","workType","category","Card","IconButton","aria-label","event","target","style","length","substring","getStringDate","date","CardContent","cardContent","Grid","container","spacing","item","xs","position","ingressAmount","tip","client","useIngress","useWorkTypeState","useClientState","useAmmountState","useTipState","useDateState","Date","useStyles","formControl","minWidth","width","marginBottom","selectEmpty","AddIngress","handleOk","handleCancel","dataW","useQuery","getWorkTypes","data","dataC","wtState","setWtState","clientState","setClientState","ammountState","setAmmountState","tipState","setTipState","dateState","setDateState","useEffect","id","Dialog","aria-labelledby","DialogTitle","DialogContent","FormControl","InputLabel","shrink","Select","labelId","onChange","wtId","wt","worktypes","worktype","find","price","displayEmpty","map","key","backgroundColor","margin","borderRadius","clients","cli","handleChange","label","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","DialogActions","Button","editIngressMutation","removeIngressMutation","getIngresses","GridItem","sm","md","lg","children","IngressCmp","openAdd","setOpenAdd","editIngress","setEditIngress","variables","start","limit","loading","refetch","error","useMutation","fnSave","fnRemove","useMessage","Message","setMessage","useProgress","Progress","setShowProgress","CssBaseline","Container","ingresses","ingressId","then","resp","removeIngress","success","Error","catch","err","actions","icon","alert","worktypeId","clientId","ingressAmmount","ammount","upsertIngress","saveIngress","Ingress"],"mappings":"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","file":"static/js/9.dab2180c.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n}), 'MoreVert');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16\n  },\n\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16\n  },\n\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8\n  },\n\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the title Typography element. */\n  title: {},\n\n  /* Styles applied to the subheader Typography element. */\n  subheader: {}\n};\nvar CardHeader = React.forwardRef(function CardHeader(props, ref) {\n  var action = props.action,\n      avatar = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      subheaderProp = props.subheader,\n      subheaderTypographyProps = props.subheaderTypographyProps,\n      titleProp = props.title,\n      titleTypographyProps = props.titleTypographyProps,\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  var title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps), title);\n  }\n\n  var subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"textSecondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps), subheader);\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), avatar && React.createElement(\"div\", {\n    className: classes.avatar\n  }, avatar), React.createElement(\"div\", {\n    className: classes.content\n  }, title, subheader), action && React.createElement(\"div\", {\n    className: classes.action\n  }, action));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardHeader'\n})(CardHeader);","import {gql} from 'apollo-boost';\r\nconst editClientMutation = gql`\r\nmutation ($clientId: ID, $nombre: String!, $telefono: String, $direccion: String) {\r\n    upsertClient(clientId:$clientId, name: $nombre, phone: $telefono, address: $direccion){            \r\n        success\r\n        message\r\n        client {\r\n            id\r\n            name\r\n            phone\r\n            address\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst removeClientMutation = gql`\r\nmutation($clientId: ID!){\r\n    removeClient(clientId: $clientId){\r\n        success\r\n        message\r\n    }\r\n}\r\n`;\r\nconst getClients = gql`\r\nquery {\r\n    clients {\r\n        success\r\n        message\r\n        client{\r\n            id\r\n            name\r\n            phone\r\n            address\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport {getClients, removeClientMutation, editClientMutation};","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    Menu,\r\n    MenuItem,\r\n    IconButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n    Tooltip,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {getStringDate} from '../../../Generics';\r\n\r\nconst useRowStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: 345,\r\n        height: 200,\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            boxShadow: '0px 5px 10px -1px rgba(0,0,0,0.3), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0 ,0,0,0.12)'\r\n        },\r\n    },\r\n    cardHeader: {\r\n        overflow: 'auto'\r\n    }\r\n}));\r\n  \r\nconst Row = props => {\r\n\r\n    const {ingress, remove, edit} = props;\r\n    const classes = useRowStyles();\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.target);\r\n    }\r\n    const isMenuOpen = !!anchorEl;\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    }\r\n    const Actions = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}        \r\n            keepMounted\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n\r\n            <MenuItem onClick={() => {\r\n                 handleMenuClose();\r\n                 edit();\r\n            }}>\r\n                <ListItemIcon>\r\n                    <EditIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Modificar\" />\r\n            </MenuItem>\r\n\r\n            <MenuItem onClick={() => {\r\n                 handleMenuClose();\r\n                 remove();\r\n            }}>\r\n                <ListItemIcon>\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Eliminar\" />\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    return <>    \r\n         <Tooltip title={ingress.workType.category.name +': '+ ingress.workType.name} >\r\n            <Card className={classes.card} >\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton aria-label=\"settings\" onClick={openMenu}>\r\n                            <MoreVertIcon style={{color: ingress.workType.category.color}}/>\r\n                        </IconButton>\r\n                    }\r\n                    title={`${(ingress.workType.name.length > 18) ? ingress.workType.name.substring(0, 18) + '...' : ingress.workType.name}`}                    \r\n                    subheader={\r\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                            {getStringDate(ingress.date)}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent className={classes.cardContent}>                    \r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <Typography variant=\"h6\" color=\"textPrimary\" component=\"p\" style={{position:'static'}}>\r\n                                {`Ingreso: $${ingress.ingressAmount}`}\r\n                            </Typography>    \r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\" style={{position:'static'}}>\r\n                                {`Propina: $${ingress.tip}`}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>                    \r\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\" component=\"p\" style={{position:'static'}}>\r\n                        {`Cliente: ${ingress.client ? ingress.client.name : ''}`}\r\n                    </Typography>\r\n                </CardContent>            \r\n            </Card>\r\n        </Tooltip>    \r\n        {Actions}\r\n    </>\r\n    ;\r\n\r\n};\r\n\r\nexport default Row;","import {useState} from 'react';\r\n\r\nconst useIngress = () => {\r\n\r\n    const useWorkTypeState = useState(null);\r\n    const useClientState = useState(null);\r\n    const useAmmountState = useState(0);\r\n    const useTipState = useState(0);\r\n    const useDateState = useState(new Date());\r\n\r\n    return {\r\n        useWorkTypeState,\r\n        useClientState,\r\n        useAmmountState,\r\n        useTipState,\r\n        useDateState\r\n    }\r\n}\r\nexport default useIngress;","import React from 'react';\r\nimport {useQuery} from 'react-apollo';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    InputLabel,\r\n    Grid,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from '@material-ui/pickers';\r\n\r\nimport {getClients} from '../Clients/clientQuerys';\r\nimport {getWorkTypes} from '../WorkTypes/worktypeQuerys';\r\n\r\nimport useIngress from './useIngress';\r\nimport {NumberInput} from '../../Generics';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n      //margin: theme.spacing(1),\r\n      minWidth: 120,\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(0.5)\r\n    },\r\n    selectEmpty: {\r\n      //marginTop: theme.spacing(2),\r\n    }\r\n  }));\r\n\r\nconst AddIngress = props => {\r\n\r\n    const {handleOk, handleCancel, open, edit} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const {data: dataW} = useQuery(getWorkTypes);\r\n    const {data: dataC} = useQuery(getClients);\r\n\r\n\r\n    const {useWorkTypeState, useClientState, useAmmountState, useTipState, useDateState} = useIngress();\r\n    const [wtState, setWtState] = useWorkTypeState;\r\n    const [clientState, setClientState] = useClientState;\r\n    const [ammountState, setAmmountState] = useAmmountState;\r\n    const [tipState, setTipState] = useTipState;\r\n    const [dateState, setDateState] = useDateState;\r\n    \r\n    React.useEffect(() => {\r\n        if(edit){\r\n            setWtState(edit.workType.id);\r\n            setClientState(edit.client && edit.client.id);\r\n            setAmmountState(edit.ingressAmount);\r\n            setTipState(edit.tip);\r\n            setDateState(edit.date);\r\n        }else {\r\n            setWtState(null);\r\n            setClientState(null);\r\n            setAmmountState(0);\r\n            setTipState(0);\r\n            setDateState(new Date());\r\n        };\r\n\r\n    }, [open, edit, setWtState, setClientState, setAmmountState, setTipState, setDateState]);\r\n\r\n    const changeWorkType = event => {\r\n        const wtId = event.target.value;\r\n        const wt = dataW.worktypes.worktype.find(wt => wt.id === wtId);\r\n        setAmmountState(wt.price);\r\n        setWtState(event.target.value);\r\n    }\r\n\r\n    return <Dialog \r\n                open={open} \r\n                onClose={handleCancel} \r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">Adicionar ingreso</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id=\"work-type\">Tipo de trabajo</InputLabel>\r\n                        <Select\r\n                            labelId=\"work-type\"\r\n                            id=\"work-type-placeholder\"\r\n                            value={wtState}\r\n                            onChange={changeWorkType}\r\n                            displayEmpty\r\n                            className={classes.selectEmpty}\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>Ninguno</em>\r\n                            </MenuItem>\r\n                            {\r\n                                dataW && dataW.worktypes && dataW.worktypes.worktype.map(wt => {\r\n                                    return <MenuItem value={wt.id} key={wt.id}>\r\n                                        <Grid container>\r\n                                            <div style={{backgroundColor: wt.category.color, margin: '0 1rem', width: \"1rem\", height: \"1rem\", borderRadius: \"50%\"}} />\r\n                                            {wt.name}\r\n                                        </Grid>\r\n                                    </MenuItem>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id=\"cliente\">Cliente</InputLabel>\r\n                        <Select\r\n                            labelId=\"cliente\"\r\n                            id=\"cliente-placeholder\"\r\n                            value={clientState}\r\n                            onChange={event => setClientState(event.target.value)}\r\n                            displayEmpty\r\n                            className={classes.selectEmpty}\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>Ninguno</em>\r\n                            </MenuItem>\r\n                            {\r\n                                dataC && dataC.clients && dataC.clients.client.map(cli => {\r\n                                    return <MenuItem value={cli.id} key={cli.id}>\r\n                                        {cli.name}\r\n                                    </MenuItem>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <NumberInput \r\n                        handleChange={event => setAmmountState(+event.target.value)}\r\n                        value={ammountState}\r\n                        label='Ingreso'\r\n                    />\r\n\r\n                    <NumberInput \r\n                        handleChange={event => setTipState(+event.target.value)}\r\n                        value={tipState}\r\n                        label='Propina'\r\n                    />\r\n\r\n                    \r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>                                              \r\n                        <Grid container >\r\n                            <KeyboardDatePicker\r\n                                disableToolbar\r\n                                margin=\"normal\"\r\n                                variant=\"dialog\"\r\n                                format=\"dd/MM/yyyy\"\r\n                                label=\"Fecha\"\r\n                                value={dateState}\r\n                                onChange={setDateState}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'Fecha',\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </MuiPickersUtilsProvider> \r\n                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleCancel} color=\"primary\">\r\n                    Cancelar\r\n                </Button>\r\n                <Button onClick={() => handleOk( \r\n                                            (edit) && edit.id,\r\n                                            wtState,\r\n                                            clientState,\r\n                                            ammountState,\r\n                                            tipState,\r\n                                            dateState\r\n                                            )} color=\"primary\">\r\n                    Guardar\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n\r\n}\r\nexport default AddIngress;","import {gql} from 'apollo-boost';\r\n\r\nconst editIngressMutation = gql`\r\nmutation ($ingressId: ID, $worktypeId: ID!, $clientId: ID,\r\n    $ammount: Float!, $tip: Float!, $date: Date\r\n  ) {\r\n    upsertIngress(\r\n      ingressId: $ingressId, \r\n      worktypeId: $worktypeId, \r\n      clientId: $clientId,\r\n      amount: $ammount,\r\n      tip: $tip,\r\n      date: $date\r\n    ){\r\n      success\r\n      message\r\n      ingress{\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst removeIngressMutation = gql`\r\nmutation($ingressId: ID!) {\r\n    removeIngress(ingressId: $ingressId){\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst getIngresses = gql`\r\nquery($worktype: String, $clientname: String, $ingress_gte: Float, $ingress_lte: Float, $ingress_eq: Float,\r\n        $tip_gte: Float, $tip_lte: Float, $tip_eq: Float, \r\n        $wtcategoryIds: [ID],$before: Date, $after: Date, $start: Int, $limit: Int\r\n    ) {\r\n    ingresses(\r\n        worktype: $worktype,\r\n        client: $clientname,\r\n        ingress: {gte: $ingress_gte, lte:$ingress_lte,eq:$ingress_eq},\r\n        tip: {gte: $tip_gte, lte:$tip_lte,eq:$tip_eq},\r\n        dateRange:{ before: $before, after: $after },\r\n        pagination:{start: $start, limit: $limit},\r\n        wtcategoryIds: $wtcategoryIds   \r\n    )\r\n    {\r\n      success\r\n      message\r\n      ingress {\r\n        id\r\n        workType{\r\n          id \r\n          name \r\n          price\r\n          category {\r\n            id\r\n            name\r\n            color\r\n          }\r\n        }\r\n        client {id name phone address imgUrl}\r\n        ingressAmount\r\n        tip\r\n        date      \r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport {getIngresses, removeIngressMutation, editIngressMutation};","import React, { useEffect } from 'react';\r\nimport {useMutation, useQuery} from 'react-apollo';\r\nimport {\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    makeStyles    \r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport {OpenIconSpeedDial, useMessage, useProgress} from '../../Generics';\r\n\r\nimport Row from './ingress/ingressRow.view';\r\nimport AddIngress from './addingress.view';\r\nimport {editIngressMutation, getIngresses, removeIngressMutation} from './ingressQuerys';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        padding: theme.spacing(1),       \r\n        //backgroundColor: theme.palette.background.paper,\r\n        //height: '100vh'        \r\n    }\r\n}));\r\n\r\nconst GridItem = props => {\r\n    return <Grid item xs={12}  sm={6} md={6} lg={4}>                    \r\n                {props.children}\r\n            </Grid>\r\n};\r\n\r\nconst IngressCmp = props => {\r\n\r\n    const classes = useStyles();\r\n    const [openAdd, setOpenAdd] = React.useState(false);\r\n    const [editIngress, setEditIngress] = React.useState(null);\r\n    const {data, loading, refetch, error} = useQuery(getIngresses, {variables: {\r\n        start: 0, limit: 20\r\n    }});\r\n    \r\n    const [fnSave] = useMutation(editIngressMutation);\r\n    const [fnRemove] = useMutation(removeIngressMutation);\r\n    const [Message, setMessage] = useMessage();\r\n    const [Progress, setShowProgress] = useProgress();\r\n\r\n\r\n    const saveIngress = (ingressId, worktypeId, clientId, ingressAmmount, tip, date) => {\r\n        setOpenAdd(false);\r\n        \r\n        setShowProgress(true);\r\n        fnSave({\r\n            variables: {\r\n                ingressId,\r\n                worktypeId,\r\n                clientId,\r\n                ammount: ingressAmmount,\r\n                tip,\r\n                date\r\n            }\r\n        })\r\n        .then(resp => {\r\n            if(!resp.data.upsertIngress.success)\r\n                throw new Error();\r\n            else{\r\n                setMessage(\"El ingreso ha sido guardado.\", \"success\");\r\n                setShowProgress(false);\r\n            }\r\n        })\r\n        .then(() => {\r\n            refetch();\r\n        })\r\n        .catch(err => {\r\n            //console.log(err);\r\n            setMessage(\"Ha ocurreido un error. No se ha podido salvar el ingreso.\", \"error\");\r\n            setShowProgress(false);            \r\n        });\r\n    };\r\n\r\n    const removeIngress = ingressId => {\r\n        setShowProgress(true);\r\n        fnRemove({variables:{\r\n            ingressId\r\n        }})\r\n        .then(resp => {\r\n            if(!resp.data.removeIngress.success)\r\n                throw new Error();\r\n            else\r\n                setMessage(\"El ingreso ha sido eliminado.\", \"success\"); \r\n                setShowProgress(false);\r\n        })\r\n        .then(() => {\r\n            refetch();\r\n        })\r\n        .catch(err => {\r\n            //console.log(err);\r\n            setMessage(\"Ocurrio un error eliminando el ingreso.\", \"error\");\r\n            setShowProgress(false);            \r\n        });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if(loading)\r\n            setShowProgress(true);\r\n        else\r\n            setShowProgress(false);\r\n    }, [loading, setShowProgress]);\r\n\r\n    useEffect(() => {\r\n        if(error){\r\n            //console.log(error);\r\n            setMessage(\"Ocurrio un error al intentar cargar los datos.\", \"error\");\r\n        }\r\n    }, [error, setMessage]);\r\n\r\n    return <>\r\n        {Progress}\r\n        <CssBaseline />\r\n            <Container maxWidth=\"md\" className={classes.container}>\r\n                \r\n                <Grid container spacing={2}>\r\n                    {data && data.ingresses && data.ingresses.ingress.map(ingress => {\r\n                        return <GridItem key={ingress.id}>\r\n                                    <Row\r\n                                        ingress={ingress}\r\n                                        remove={() => removeIngress(ingress.id)}\r\n                                        edit={() => {\r\n                                            setOpenAdd(true);\r\n                                            setEditIngress(ingress);\r\n                                        }}\r\n                                    />\r\n                                </GridItem>\r\n                    })}                    \r\n                </Grid>\r\n                <OpenIconSpeedDial actions={\r\n                    [{\r\n                        icon: <AddIcon />,\r\n                        name: \"Adicionar cliente\", \r\n                        onClick:() => setOpenAdd(true)\r\n                    },{\r\n                        icon: <SearchIcon />,\r\n                        name: \"Buscar cliente\",\r\n                        onClick:() => alert(\"TODO: Buscar cliente\")\r\n                    }]\r\n                }/>\r\n\r\n                \r\n            </Container>\r\n            <AddIngress \r\n                open={openAdd} \r\n                handleCancel={() => {\r\n                    setOpenAdd(false);\r\n                    setEditIngress(null);\r\n                }} \r\n                handleOk={ (ingressId, worktypeId, clientId, ingressAmmount, tip, date) => {\r\n                    saveIngress(ingressId, worktypeId, clientId, ingressAmmount, tip, date);\r\n                    setOpenAdd(false);\r\n                    setEditIngress(null);\r\n                }}\r\n                edit={editIngress}\r\n                \r\n            />\r\n            {Message}\r\n    </>\r\n\r\n}\r\nexport default IngressCmp;","import Ingress from './ingress.view';\r\nexport default Ingress;"],"sourceRoot":""}