{"version":3,"sources":["App/Core/Pages/Charts/Days/calendar.view.js"],"names":["DemoApp","state","showMostWorkedDay","showLessWorkedDay","calendarComponentRef","React","createRef","render","style","maxWidth","margin","ref","defaultView","plugins","dayGridPlugin","height","header","right","locale","eventLimit","eventPositioned","handleEventPositioned","validRange","start","props","end","displayEventTime","events","data","map","ingress","id","title","workType","name","ingressAmount","date","color","category","type","multiline","info","eventObj","event","el","setAttribute","extendedProps","ReactTooltip","rebuild","PureComponent"],"mappings":"kQAcqBA,G,kNACjBC,MAAQ,CACJC,mBAAqB,EACrBC,mBAAmB,G,EAGvBC,qBAAuBC,IAAMC,Y,EAgD7BC,OAAS,WAEL,OACI,yBAAKC,MAAO,CAACC,SAAU,MAAOC,OAAQ,SAClC,kBAAC,IAAD,CACIC,IAAK,EAAKP,qBACVQ,YAAY,eACZC,QAAS,CAAEC,KACXC,OAAQ,IAERC,OAAQ,CAEJC,MAAO,+BAGXC,OAAQ,KACRC,YAAY,EACZC,gBAAiB,EAAKC,sBAWtBC,WAAY,CACRC,MAAO,EAAKC,MAAMD,MAClBE,IAAK,EAAKD,MAAMC,KAEpBC,kBAAkB,EAClBC,OAAQ,EAAKH,MAAMI,KAAKC,KAAI,SAAAC,GACpB,MAAO,CACHC,GAAID,EAAQC,GACZC,MAAM,GAAD,OAAKF,EAAQG,SAASC,KAAtB,aAA+BJ,EAAQK,eAC5CZ,MAAOO,EAAQM,KACfC,MAAOP,EAAQG,SAASK,SAASD,MAEjCC,SAAUR,EAAQG,SAASK,SAASJ,KACpCJ,QAASA,EAAQK,oBA0BjC,kBAAC,IAAD,CACII,KAAK,OACLC,WAAW,M,qFAlHLC,GAClB,IAAMC,EAAWD,EAAKE,MACtBF,EAAKG,GAAGC,aAAa,WAAY,YAAcH,EAASV,MAAQ,iBAC3CU,EAASI,cAAchB,QAAU,kBAChCY,EAASI,cAAcR,UAE7CS,IAAaC,c,GAfgB3C,IAAM4C","file":"static/js/12.c92bcb2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport ReactTooltip from 'react-tooltip';\r\n/*import moment from 'moment';\r\n\r\nimport {\r\n    Dialog, DialogTitle, DialogContent, DialogContentText\r\n} from '@material-ui/core';\r\n*/\r\n\r\n\r\nimport './main.scss'; // webpack must be configured to do this\r\n\r\nexport default class DemoApp extends React.PureComponent {\r\n    state = {\r\n        showMostWorkedDay  : false,\r\n        showLessWorkedDay: false\r\n    }\r\n\r\n    calendarComponentRef = React.createRef();\r\n    \r\n\r\n    handleEventPositioned(info) {\r\n        const eventObj = info.event;        \r\n        info.el.setAttribute(\"data-tip\", 'Trabajo: ' + eventObj.title + '<br>' \r\n            + 'Ingresos: ' + eventObj.extendedProps.ingress + '<br>'\r\n            + 'Categoria: ' + eventObj.extendedProps.category \r\n        );\r\n        ReactTooltip.rebuild();\r\n    }\r\n/*\r\n    componentDidMount(){\r\n        const dataMap = new Map();\r\n        let maxIngressDay = {};\r\n        let lessIngressDay = {};\r\n        this.maxWorksDay = {};\r\n        let minWorksDay = {};\r\n\r\n        this.props.data.forEach(ingress => {\r\n            const dateKey = moment(ingress.date).format('L');\r\n            if(dataMap.has(dateKey)){\r\n                const newAmmount = dataMap.get(dateKey).ammount + 1;\r\n                const newIngress = dataMap.get(dateKey).ingress + ingress.ingressAmount\r\n                if(this.maxWorksDay && this.maxWorksDay.ammount < newAmmount){\r\n                    this.maxWorksDay.ammount = newAmmount;\r\n                    this.maxWorksDay.date = dateKey;\r\n                }\r\n                dataMap.set(dateKey, {\r\n                    date: dateKey,\r\n                    ingress: newIngress,\r\n                    ammount: newAmmount\r\n                });\r\n            }else{\r\n                if(this.maxWorksDay && this.maxWorksDay.ammount < 1){\r\n                    this.maxWorksDay.ammount = 1;\r\n                    this.maxWorksDay.date = dateKey;\r\n                }\r\n                dataMap.set(dateKey, {\r\n                    date: dateKey,\r\n                    ingress: ingress.ingressAmount,\r\n                    ammount: 1    \r\n                });\r\n            }\r\n\r\n        });\r\n    }*/\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div style={{maxWidth: '90%', margin: 'auto'}}>\r\n                <FullCalendar\r\n                    ref={this.calendarComponentRef} \r\n                    defaultView=\"dayGridMonth\" \r\n                    plugins={[ dayGridPlugin ]} \r\n                    height={500}\r\n                    //aspectRatio={1}\r\n                    header={{\r\n                        //center: 'btnDiaMasTrabajado btnDiaMenosTrabajado',\r\n                        right: 'prevYear,prev,next,nextYear'                        \r\n                    }}\r\n\r\n                    locale={'es'}\r\n                    eventLimit={true}   \r\n                    eventPositioned={this.handleEventPositioned}\r\n                    \r\n                    /*eventClick={info => {\r\n                        const eventObj = info.event;\r\n                        alert('Trabajo: ' + eventObj.title + '\\n' \r\n                            + 'Ingresos: ' + eventObj.extendedProps.ingress + '\\n'\r\n                            + 'Categoria: ' + eventObj.extendedProps.category + '\\n'\r\n                            + 'Color: ' + eventObj.extendedProps.bgcolor\r\n                        );\r\n                    }}*/\r\n\r\n                    validRange={{\r\n                        start: this.props.start,\r\n                        end: this.props.end\r\n                    }}\r\n                    displayEventTime={false}\r\n                    events={this.props.data.map(ingress => {\r\n                            return {\r\n                                id: ingress.id,\r\n                                title: `${ingress.workType.name} $${ingress.ingressAmount}`,\r\n                                start: ingress.date,\r\n                                color: ingress.workType.category.color,\r\n                                //bgcolor: ingress.workType.category.color,\r\n                                category: ingress.workType.category.name,\r\n                                ingress: ingress.ingressAmount,\r\n                                \r\n                            }\r\n                        })\r\n                    }\r\n                    /*\r\n                    customButtons={{\r\n                        btnDiaMasTrabajado: {\r\n                            text: 'Dia más trabajado',\r\n                            click: () => {\r\n                                const calendarApi = this.calendarComponentRef.current.getApi();\r\n                                calendarApi.gotoDate(moment(this.maxWorksDay.date).format('YYYY-MM-DD')); // call a method on the Calendar object\r\n                                //this.setState(state => ({...state, showMostWorkedDay: true}));\r\n                            }   \r\n                        },\r\n                        btnDiaMenosTrabajado: {\r\n                            text: 'Dia menos trabajado',\r\n                            click: () => {\r\n                                const calendarApi = this.calendarComponentRef.current.getApi();\r\n                                calendarApi.gotoDate(\"2019-10-12\"); // call a method on the Calendar object\r\n                            }                            \r\n                        }\r\n                    }}*/\r\n\r\n                    \r\n                />\r\n                <ReactTooltip \r\n                    type='info'\r\n                    multiline={true}\r\n                />\r\n                {/*<Dialog\r\n                    open={this.state.showMostWorkedDay}\r\n                    onClose={() => this.setState(state => ({...state, showMostWorkedDay: false}))}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Día más trabajado\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            {this.maxWorksDay && this.maxWorksDay.date}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>*/}\r\n\r\n                \r\n            </div>\r\n        )\r\n  }\r\n\r\n}"],"sourceRoot":""}